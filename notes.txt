- The order of the loads is what matters. For example, in part1.html if we
   load the star before the sky then the sky will cover up the star, it is
   intuitive as drag and drop order but in code

- Objects may be off screen (outside the min and max coords specified) but
   that does not mean that they are off Scene. These objects still 'exist' in
   the scope for Phaser 

- `this.add.image` creates a new Image Game Object and adds it to current
     Scenes display list

- The Scene exists in infinity in all sides, it has no fixed dimensions

- The Camera System controls your view into the Scene and you can interact with
  the camera as you want

- `this.physics` utilises the Arcade Physics system which must be added to the
  Game Config as a Phaser 'dependency' of sorts

- There are two types of physics bodies in Arcade Physics: Dynamic and Static.
  Dynamic bodies can react to physics events while Static bodies cannot 

- Dynamic bodies: balls, boxes, destructibles, etc

- Static bodies: platforms, walls, ground, non-reactive collidables, etc

- Similar objects can be categorised in a Group and controlled as a single
  unit

- You can check for effects between Groups since they are treated like a single
  unit. For example, you can check for collisions between Groups

- Groups can create their own Game Objects with the `create` function (acts
  like a keyword within Phaser)

- Properties are transferred from Groups like traits from parents. A Physics
  Group, thus, will create physics enabled children. 

- `setScale(int n)` sets the scale for a property. 32x32 -> setScale(2) = 64x64

- `refreshBody()` refreshes the changes in the world that were made that differ
  from initialised loading of those assets/objects

- `this.physics.add` is a Physics Game Object Factory invocation

- Unless specified, Physics Game Object Factory creates a Dynamic Physics body
  by default, such as with sprites

- A `spritesheet` contains animation frames and is segmented

- Phaser support flipping sprites which means that instead of having frames for
  walking right and also left one can only create frames for either side and
  then simply flip that side for the other direction in the code

- `frameHeight` and `frameWidth` properties in the `preload` segment the
  spritesheet accordingly so frames can later be referenced as whole pieces of
  how they are divided up. Frame 1 will refer to (frameHeight)x(frameWidth) and
  Frame 2 will refer to (frameHeight*2)x(frameWidth*2) and so on until the end
  of the spritesheet

- The `repeat: -1` property indicates an animation to loop forever

- A characters movement in left and right frames as well as camera facing (or
  idle) frames combined is referred to as the `run cycle`. A single loop of run
  animations

- The Animation Manager is a global system which means animations created in it
  can be instanced-ly used for n number of Game Objects in the global scope

- Phaser's physics systems are plugins. It ships with a standard collection of
  Arcade, Impact and Matter.js Physics. Arcade Physics is quite a lightweight
  physics system, most suitable for mobile browsers

- The `body` property is a default and highly extensible function given to a
  Physics Sprite upon initialisation referencing its Arcade Physics Body

- In order for things to be collidable, a Collider object must be created 

- The Collider object monitors two physics objects (even Groups are objects).
  If that happens then a callback is invoked which could be custom or built in
  or plugin based, it's just a function 

- Phaser has a built-in Keyboard Manager which means that event listeners are
  made obsolete for most of the stuff that is required in a game

- The `createCursorKeys()` function on the cursors object populates it with
  four directional properties

- The cursor properties must be polled in the `update` loop

- Phaser allows for complex movement that takes in account momentum and
  acceleration


